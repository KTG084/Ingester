// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                 String     @id @default(cuid()) @map("_id")
  email              String     @unique
  password           String?
  emailVerified      DateTime?
  image              String?
  name               String?
  razorpayCustomerId String?
  accounts           Account[]
  Agents             Agents[]
  Meetings           Meetings[]
}

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid()) @map("_id")
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Agents {
  id           String     @id @default(cuid()) @map("_id")
  name         String     @unique
  userId       String
  instructions String
  meetings     Int?       @default(0)
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  Meetings     Meetings[]
}

model Meetings {
  id            String        @id @default(cuid()) @map("_id")
  name          String        @unique
  userId        String
  agentId       String
  transcriptUrl String?
  recordingUrl  String?
  summary       String?
  status        MeetingStatus @default(UPCOMING)
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  agent         Agents        @relation(fields: [agentId], references: [id], onDelete: Cascade)

  startedAt DateTime?
  endedAt   DateTime?
  duration  Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum MeetingStatus {
  UPCOMING
  ACTIVE
  COMPLETED
  PROCESSING
  CANCELLED
}
